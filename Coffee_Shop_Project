import tkinter as tk
from tkinter import ttk
import psycopg2

def construct_sql_query(selected_criteria, filters):
    base_query = "SELECT coffee_shop, location, opening_hours_sunday, opening_hours_monday, opening_hours_tuesday, opening_hours_wednesday, opening_hours_thursday, opening_hours_friday, opening_hours_saturday FROM coffe_shop_tlv_final.final_data WHERE "
    
    where_clauses = []

    # Add rating filter
    if filters.get("min_rating") or filters.get("max_rating"):
        try:
            min_rating = float(filters.get("min_rating", 1))
            max_rating = float(filters.get("max_rating", 10))
            where_clauses.append(f"rating BETWEEN {min_rating} AND {max_rating}")
        except ValueError:
            print("Invalid rating value")
    
    # Add price filters
    if filters.get("espresso_ils") and filters["espresso_ils"] != "I don't care":
        where_clauses.append(f"espresso_ils = '{filters['espresso_ils']}'")
    if filters.get("americano_ils") and filters["americano_ils"] != "I don't care":
        where_clauses.append(f"americano_ils = '{filters['americano_ils']}'")
    if filters.get("cappuccino_latte_ils") and filters["cappuccino_latte_ils"] != "I don't care":
        where_clauses.append(f"cappuccino_latte_ils = '{filters['cappuccino_latte_ils']}'")
    
    # Add criteria filters
    for criterion in ["wifi", "breakfast", "vegetarian_vegan_options", "access_for_disabled", "take_away", "parking", "special_payment_methods"]:
        if selected_criteria.get(criterion):
            where_clauses.append(f"{criterion} = '{selected_criteria[criterion]}'")
    
    # Add kosher filter
    if selected_criteria.get("kosher") and selected_criteria["kosher"] != "I don't care":
        where_clauses.append(f"kosher = '{selected_criteria['kosher']}'")
    
    # Combine all where clauses
    if where_clauses:
        base_query += " AND ".join(where_clauses)
    else:
        base_query = base_query.rstrip(" WHERE")
    
    print("Constructed SQL Query:", base_query)  # Debugging print statement
    return base_query

def fetch_results():
    selected_criteria = {
        "wifi": wifi_var.get() and 'yes' or '',
        "breakfast": breakfast_var.get() and 'yes' or '',
        "vegetarian_vegan_options": vegan_var.get() and 'yes' or '',
        "access_for_disabled": disabled_access_var.get() and 'yes' or '',
        "take_away": take_away_var.get() and 'yes' or '',
        "parking": parking_var.get() and 'yes' or '',
        "special_payment_methods": special_payment_methods_var.get() and 'yes' or '',
        "kosher": kosher_var.get()
    }
    filters = {
        "min_rating": min_rating_slider.get(),
        "max_rating": max_rating_slider.get(),
        "espresso_ils": espresso_combobox.get(),
        "americano_ils": americano_combobox.get(),
        "cappuccino_latte_ils": cappuccino_combobox.get()
    }
    
    sql_query = construct_sql_query(selected_criteria, filters)
    
    try:
        connection = psycopg2.connect(
            host="localhost",
            database="coffe_shop_tlv",
            user="postgres",
            password="1212333eE"
        )
        cursor = connection.cursor()
        cursor.execute(sql_query)
        results = cursor.fetchall()
        
        # Clear previous results
        for widget in results_frame.winfo_children():
            widget.destroy()
        
        # Display new results
        for row in results:
            coffee_shop, location, *opening_hours = row
            result_label = tk.Label(results_frame, text=f"{coffee_shop} - {location}", font=("Helvetica", 8))
            result_label.pack(pady=(0, 5))
            
            # Add opening hours details
            hours_label = tk.Label(results_frame, text="Opening Hours:\n" +
                f"Sunday: {opening_hours[0]}\n" +
                f"Monday: {opening_hours[1]}\n" +
                f"Tuesday: {opening_hours[2]}\n" +
                f"Wednesday: {opening_hours[3]}\n" +
                f"Thursday: {opening_hours[4]}\n" +
                f"Friday: {opening_hours[5]}\n" +
                f"Saturday: {opening_hours[6]}", font=("Helvetica", 8))
            hours_label.pack(pady=(0, 5))

        cursor.close()
        connection.close()
    except Exception as error:
        print("Error while fetching data from PostgreSQL", error)

def reset_filters():
    # Reset all checkbuttons
    wifi_var.set(False)
    breakfast_var.set(False)
    vegan_var.set(False)
    disabled_access_var.set(False)
    take_away_var.set(False)
    parking_var.set(False)
    special_payment_methods_var.set(False)
    
    # Reset all comboboxes
    kosher_combobox.set("I don't care")
    espresso_combobox.set("I don't care")
    americano_combobox.set("I don't care")
    cappuccino_combobox.set("I don't care")
    
    # Reset sliders
    min_rating_slider.set(1)
    max_rating_slider.set(10)
    
    # Clear results
    for widget in results_frame.winfo_children():
        widget.destroy()

# Create main window
root = tk.Tk()
root.title("Find the perfect coffee shop for you in Tel Aviv!")

# Define custom style for round buttons and bigger submit button
style = ttk.Style()
style.configure('Custom.TButton', font=('Helvetica', 8), width=30, padding=5)  # Wider button

# Create frames for layout
left_frame = ttk.Frame(root)
left_frame.pack(side=tk.LEFT, fill=tk.BOTH, padx=10, pady=10, expand=True)

right_frame = ttk.Frame(root)
right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, padx=10, pady=10, expand=True)

# Title
title_label = tk.Label(left_frame, text="Find the perfect coffee shop for you in Tel Aviv!", font=("Helvetica", 12))
title_label.pack(pady=(15, 5))

# Subheading for important criteria
criteria_label = tk.Label(left_frame, text="What are the most important things to you:", font=("Helvetica", 8))
criteria_label.pack(pady=(5, 5))

# Criteria: WiFi, Breakfast, Vegetarian/Vegan Options, Access for Disabled, Take Away, Parking
criteria_frame = ttk.Frame(left_frame)
criteria_frame.pack(pady=(0, 10))

wifi_var = tk.BooleanVar()
wifi_check = tk.Checkbutton(criteria_frame, text="WiFi", variable=wifi_var, onvalue=True, offvalue=False, width=10)
wifi_check.grid(row=0, column=0, padx=5, pady=3)

breakfast_var = tk.BooleanVar()
breakfast_check = tk.Checkbutton(criteria_frame, text="Breakfast", variable=breakfast_var, onvalue=True, offvalue=False, width=10)
breakfast_check.grid(row=0, column=1, padx=5, pady=3)

vegan_var = tk.BooleanVar()
vegan_check = tk.Checkbutton(criteria_frame, text="Vegetarian/Vegan", variable=vegan_var, onvalue=True, offvalue=False, width=15)
vegan_check.grid(row=0, column=2, padx=5, pady=3)

disabled_access_var = tk.BooleanVar()
disabled_access_check = tk.Checkbutton(criteria_frame, text="Access for Disabled", variable=disabled_access_var, onvalue=True, offvalue=False, width=15)
disabled_access_check.grid(row=1, column=0, padx=5, pady=3)

take_away_var = tk.BooleanVar()
take_away_check = tk.Checkbutton(criteria_frame, text="Take Away", variable=take_away_var, onvalue=True, offvalue=False, width=10)
take_away_check.grid(row=1, column=1, padx=5, pady=3)

parking_var = tk.BooleanVar()
parking_check = tk.Checkbutton(criteria_frame, text="Parking", variable=parking_var, onvalue=True, offvalue=False, width=10)
parking_check.grid(row=1, column=2, padx=5, pady=3)

special_payment_methods_var = tk.BooleanVar()
special_payment_methods_check = tk.Checkbutton(criteria_frame, text="Special Payment Methods", variable=special_payment_methods_var, onvalue=True, offvalue=False, width=20)
special_payment_methods_check.grid(row=2, column=0, padx=5, pady=3)

# Kosher Dropdown Menu
kosher_var = tk.StringVar(value="I don't care")

kosher_label = tk.Label(criteria_frame, text="Kosher:", font=("Helvetica", 8))
kosher_label.grid(row=2, column=1, padx=5, pady=3)

kosher_combobox = ttk.Combobox(criteria_frame, textvariable=kosher_var, values=["yes", "no", "I don't care"], state="readonly", font=("Helvetica", 8))
kosher_combobox.grid(row=2, column=2, padx=5, pady=3)

# Price Filters
price_label = tk.Label(left_frame, text="Coffee Price Filters (ILS):", font=("Helvetica", 8))
price_label.pack(pady=(10, 5))

espresso_label = tk.Label(left_frame, text="Espresso:", font=("Helvetica", 8))
espresso_label.pack(pady=(5, 0))

espresso_combobox = ttk.Combobox(left_frame, values=["8", "10", "12", "I don't care"], state="readonly", font=("Helvetica", 8))
espresso_combobox.pack(pady=(0, 5))

americano_label = tk.Label(left_frame, text="Americano:", font=("Helvetica", 8))
americano_label.pack(pady=(5, 0))

americano_combobox = ttk.Combobox(left_frame, values=["10", "12", "13", "15", "I don't care"], state="readonly", font=("Helvetica", 8))
americano_combobox.pack(pady=(0, 5))

cappuccino_label = tk.Label(left_frame, text="Cappuccino/Latte:", font=("Helvetica", 8))
cappuccino_label.pack(pady=(5, 0))

cappuccino_combobox = ttk.Combobox(left_frame, values=["12", "13", "14", "15", "18", "I don't care"], state="readonly", font=("Helvetica", 8))
cappuccino_combobox.pack(pady=(0, 10))

# Rating Filters
rating_frame = ttk.Frame(left_frame)
rating_frame.pack(pady=(10, 10))

min_rating_label = tk.Label(rating_frame, text="Min Rating (1-5):", font=("Helvetica", 8))
min_rating_label.grid(row=0, column=0, padx=5, pady=3)

min_rating_slider = tk.Scale(rating_frame, from_=1, to=5, orient=tk.HORIZONTAL, length=200, font=("Helvetica", 8))
min_rating_slider.set(1)
min_rating_slider.grid(row=0, column=1, padx=5, pady=3)

max_rating_label = tk.Label(rating_frame, text="Max Rating (5-10):", font=("Helvetica", 8))
max_rating_label.grid(row=1, column=0, padx=5, pady=3)

max_rating_slider = tk.Scale(rating_frame, from_=5, to=10, orient=tk.HORIZONTAL, length=200, font=("Helvetica", 8))
max_rating_slider.set(10)
max_rating_slider.grid(row=1, column=1, padx=5, pady=3)

# Search and Reset Buttons
search_button = ttk.Button(left_frame, text="Search", command=fetch_results, style='Custom.TButton')
search_button.pack(pady=(10, 5))

reset_button = ttk.Button(left_frame, text="Reset", command=reset_filters, style='Custom.TButton')
reset_button.pack(pady=(5, 10))

# Results Frame
results_frame = ttk.Frame(right_frame)
results_frame.pack(fill=tk.BOTH, padx=10, pady=10, expand=True)

# Run the GUI
root.mainloop()
